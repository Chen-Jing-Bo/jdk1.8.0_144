@startuml
interface Iterator<E> {
 boolean hasNext();
 E next();
 default void remove() {}
 default void forEachRemaining(Consumer<? super E> action) {}
}


interface Iterable<T> {
Iterator<T> iterator();
default void forEach(Consumer<? super T> action) {}
default Spliterator<T> spliterator() {}
}
note left of Iterable::"iterator"
子实现内部可以实现不同的iterator
end note


interface Collection<E> {
int size();
boolean isEmpty();
boolean contains(Object o);
Iterator<E> iterator();
Object[] toArray();
<T> T[] toArray(T[] a);
boolean add(E e);
boolean remove(Object o);
boolean containsAll(Collection<?> c);
boolean addAll(Collection<? extends E> c);
boolean removeAll(Collection<?> c);
default boolean removeIf(Predicate<? super E> filter) {}
boolean retainAll(Collection<?> c);
void clear();
boolean equals(Object o);
int hashCode();
default Spliterator<E> spliterator() {     }
default Stream<E> stream() { }
default Stream<E> parallelStream() {}
}
note left  of Collection
集合顶层接口
end note


abstract  class AbstractCollection<E> {
AbstractCollection
iterator
size
isEmpty
contains
toArray
toArray
finishToArray
hugeCapacity
add
remove
containsAll
addAll
removeAll
retainAll
clear
toString
}
note left of AbstractCollection
collection 的骨架实现，将实现的工作量降到最小
end note

interface List<E> {
List
size
isEmpty
contains
iterator
toArray
toArray
add
remove
containsAll
addAll
addAll
removeAll
retainAll
replaceAll
sort
clear
equals
hashCode
get
set
add
remove
indexOf
lastIndexOf
listIterator
listIterator
subList
spliterator
}

Abstract AbstractList<E>{
AbstractList
Itr
ListItr
AbstractList
add
get
set
add
remove
indexOf
lastIndexOf
clear
addAll
iterator
listIterator
listIterator
subList
equals
hashCode
removeRange
rangeCheckForAdd
outOfBoundsMsg
SubList
SubList
set
get
size
add
remove
removeRange
addAll
addAll
iterator
listIterator
subList
rangeCheck
rangeCheckForAdd
outOfBoundsMsg
checkForComodification
RandomAccessSubList
RandomAccessSubList
subList
}


AbstractCollection ..|> Collection
Collection --|> Iterable
Iterable *-- Iterator

List--|>Collection
AbstractList--|>AbstractCollection
AbstractList..|>List



@enduml